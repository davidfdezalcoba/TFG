#version 400 core
in vec3 vNormal;
in vec3 vFragPos;
in vec3 vFragColor;

out vec4 fFragColor;

struct Light {
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform float uShininess;
uniform vec3 uViewPos;
uniform mat3 uNormalMatrix;
uniform Light uLight;

void main()
{    
	//Ambient
	vec3 ambient = uLight.ambient * vFragColor; 
	//Difuse
	vec3 norm = normalize(uNormalMatrix * vNormal);
	vec3 lightDir = normalize(uLight.position - vFragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = uLight.diffuse * (diff * vFragColor); 
	//Specular
	vec3 viewDir = normalize(uViewPos - vFragPos);
    vec3 reflectDir = reflect(-lightDir, norm); 
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), uShininess);
	vec3 specular = uLight.specular * (spec * vFragColor);

	vec3 light = ambient + diffuse + specular;
    fFragColor = vec4(light, 1.0);
}
