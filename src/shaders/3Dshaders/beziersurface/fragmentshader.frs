#version 400 core
out vec4 fFragColor;

struct Light {
	vec3 position;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform float uShininess;
uniform vec3 uViewPos;
uniform mat3 uNormalMatrix;
uniform Light uLight;

const vec3 ORANGE = vec3(1.0, 0.47, 0.01);

void main()
{    
	//Ambient
	// vec3 ambient = uLight.ambient * ORANGE; 
	// //Difuse
	// vec3 norm = normalize(uNormalMatrix * vNormal);
	// vec3 lightDir = normalize(uLight.position - vFragPos);
	// float diff = max(dot(norm, lightDir), 0.0);
	// vec3 diffuse = uLight.diffuse * (diff * ORANGE); 
	// //Specular
	// vec3 viewDir = normalize(uViewPos - vFragPos);
    // vec3 reflectDir = reflect(-lightDir, norm); 
	// float spec = pow(max(dot(viewDir, reflectDir), 0.0), uShininess);
	// vec3 specular = uLight.specular * (spec * ORANGE);

	// vec3 light = ambient + diffuse + specular;
    fFragColor = vec4(ORANGE, 1.0);
}
